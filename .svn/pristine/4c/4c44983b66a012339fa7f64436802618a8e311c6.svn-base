package com.greencloud.facade.impl;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Enumeration;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;

import com.greencloud.dto.PosBillDto;
import com.greencloud.entity.PosMaster;
import com.greencloud.entity.PosOrder;
import com.greencloud.entity.PosPluAll;
import com.greencloud.facade.IPosPluFacade;
import com.greencloud.service.IPosOrderService;
import com.greencloud.service.IPosPluAllService;
import com.greencloud.util.UserManager;
import com.greencloud.utils.PropertiesUtil4Sync;

public class PosPluFacadeImpl implements IPosPluFacade {

	private IPosPluAllService posPluAllService;
	private IPosOrderService posOrderService;

	public void setPosOrderService(IPosOrderService posOrderService) {
		this.posOrderService = posOrderService;
	}

	public void setPosPluAllService(IPosPluAllService posPluAllService) {
		this.posPluAllService = posPluAllService;
	}

	@Override
	public String getTpPluAllTreeDto() {
		return posPluAllService.getTpPluAllTreeDto(
				UserManager.getHotelGroupId(), UserManager.getHotelId());
	}

	@Override
	public void updateParamGroup(Object object) {
		posPluAllService.updateParamGroup(object,
				UserManager.getHotelGroupId(), UserManager.getHotelId());
	}

	@Override
	public List<PosOrder> savePosOrder(PosMaster posMaster, String tableNo,
			PosPluAll posPluAll) {
		return posOrderService.savePosOrder(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, posPluAll);
	}

	@Override
	public void deletePosOrder(PosMaster posMaster, String tableNo) {
		posOrderService.deletePosOrder(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo);
	}

	@Override
	public void updateOrderToDetail(PosMaster posMaster, String tableNo) {
		posOrderService.updateOrderToDetail(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo);
	}

	@Override
	public void updateDealNum(PosMaster posMaster, String tableNo, String type,
			long id, String dealType) {
		posOrderService.updateDealNum(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id,
				dealType);
	}

	@Override
	public void updateCanclePlu(PosMaster posMaster, String tableNo,
			String type, long id, String info, BigDecimal number) {
		posOrderService.updateCanclePlu(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, info,
				number);
	}

	@Override
	public void updateCahngeNum(PosMaster posMaster, String tableNo,
			String type, long id, String num) {
		posOrderService.updateCahngeNum(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, num);
	}

	@Override
	public void updateCahngePrice(PosMaster posMaster, String tableNo,
			String type, long id, String price) {
		posOrderService.updateCahngePrice(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, price);
	}

	@Override
	public void updateCahngeDescript(PosMaster posMaster, String tableNo,
			String type, long id, String descript) {
		posOrderService.updateCahngeDescript(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id,
				descript);
	}

	@Override
	public void updateFreePlu(PosMaster posMaster, String tableNo, String type,
			long id, String info) {
		posOrderService.updateFreePlu(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, info);
	}

	@Override
	public void updateCancleFreePlu(PosMaster posMaster, String tableNo,
			String type, long id, String info) {
		posOrderService.updateCancleFreePlu(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, info);
	}

	@Override
	public void updateDecPlu(PosMaster posMaster, String tableNo, String type,
			long id, String reason, String amount5, String dsc) {
		posOrderService.updateDecPlu(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, reason,
				amount5, dsc);
	}

	@Override
	public void updatePluCook(PosMaster posMaster, String tableNo, String type,
			long id, String codes, String cook, String remark) {
		posOrderService.updatePluCook(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), posMaster, tableNo, type, id, codes,
				cook, remark);
	}

	@Override
	public String updateCheckOut(String coi, PosMaster posMaster,
			String tableNo, String accnts, String taCode, BigDecimal pay,
			String reason, String cardno, String remark) {
		return posOrderService.updateCheckOut(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), coi, posMaster, tableNo, accnts,
				taCode, pay, reason, cardno, remark);
	}

	@Override
	public List<PosOrder> saveCachePosOrder(String accnt, String tableNo,
			List<PosOrder> list) {
		return posOrderService.saveCachePosOrder(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), accnt, tableNo, list);
	}

	@Override
	public void updateCancleAccount(String id) {
		posOrderService.updateCancleAccount(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), id);
	}

	@Override
	public String getTpPluAllTreeDto(String pccode) {
		// TODO Auto-generated method stub
		return posPluAllService
				.getTpPluAllTreeDto(UserManager.getHotelGroupId(),
						UserManager.getHotelId(), pccode);
	}

	@Override
	public List<Object> getStdList(String accnt, String tableNo, String type,
			long id) {
		return posOrderService.getStdList(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), accnt, tableNo, type, id);
	}

	@Override
	public void updateIn(String accnt, String tableNo, String type, String ids,
			long mainId) {
		posOrderService.updateIn(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), accnt, tableNo, type, ids, mainId);
	}

	@Override
	public void updateOut(String accnt, String tableNo, String type,
			String ids, long mainId) {
		posOrderService.updateOut(UserManager.getHotelGroupId(),
				UserManager.getHotelId(), accnt, tableNo, type, ids, mainId);
	}

	@Override
	public PosBillDto getPosBillDtoByAccnt(String accnt, String tableNo) {
		return posOrderService.getPosBillDtoByAccnt(
				UserManager.getHotelGroupId(), UserManager.getHotelId(), accnt,
				tableNo);
	}

	@Override
	public int getMaxPosPluId(String sortCode) {
		return posPluAllService.getMaxPosPluId(sortCode);
	}

	@Override
	public void updatePluAllPic() {
		posPluAllService.updatePluAllPic(UserManager.getHotelGroupId(),
				UserManager.getHotelId());
	}

	@Override
	public String getPluAllPhotoZip() {
		String flag = "success";
		String url = PropertiesUtil4Sync.getProperty("SycHttpUrl")
				+ "/posFileController/downloadFiles.do";
		try {
			// 建立链接
			HttpURLConnection httpUrl = (HttpURLConnection) new URL(url)
					.openConnection();
			// 连接指定的资源
			httpUrl.connect();
			// 获取网络输入流
			BufferedInputStream bufferedInputStream = new BufferedInputStream(
					httpUrl.getInputStream());
			// 建立文件
			FileOutputStream fileOutputStream = new FileOutputStream(
					"d:/pluPhoto.zip");
			// 保存文件
			byte[] buf = new byte[1024];
			int size = 0;
			while ((size = bufferedInputStream.read(buf)) != -1) {
				fileOutputStream.write(buf, 0, size);
			}
			fileOutputStream.flush();
			bufferedInputStream.close();
			fileOutputStream.close();
			String filePath = this.getClass().getResource("/").getPath();
			File distFile = new File("d:/pluPhoto.zip");
			Boolean isSuccess = this.unZipFiles(distFile,
					filePath.substring(0, filePath.indexOf("classes"))
							+ "pluPhoto/");
			if (!isSuccess) {
				flag = "error";
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag = "error";
		}
		return flag;
	}

	/**
	 * 解压文件到指定目录
	 * 
	 * @param zipFile
	 * @param descDir
	 * @author isea533
	 */
	@SuppressWarnings("rawtypes")
	public Boolean unZipFiles(File zipFile, String descDir) {
		Boolean flag = true;
		try {
			File pathFile = new File(descDir);
			if (!pathFile.exists()) {
				pathFile.mkdirs();
			}
			ZipFile zip = new ZipFile(zipFile);
			for (Enumeration entries = zip.entries(); entries.hasMoreElements();) {
				ZipEntry entry = (ZipEntry) entries.nextElement();
				String zipEntryName = entry.getName();
				InputStream in = zip.getInputStream(entry);
				String outPath = (descDir + zipEntryName)
						.replaceAll("\\*", "/");
				;
				// 判断路径是否存在,不存在则创建文件路径
				File file = new File(outPath.substring(0,
						outPath.lastIndexOf('/')));
				if (!file.exists()) {
					file.mkdirs();
				}
				// 判断文件全路径是否为文件夹,如果是上面已经上传,不需要解压
				if (new File(outPath).isDirectory()) {
					continue;
				}
				// 输出文件路径信息
				OutputStream out = new FileOutputStream(outPath);
				byte[] buf1 = new byte[1024];
				int len;
				while ((len = in.read(buf1)) > 0) {
					out.write(buf1, 0, len);
				}
				out.flush();
				in.close();
				out.close();
			}
		} catch (ZipException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag = false;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			flag = false;
		}
		return flag;
	}
}
