package com.greencloud.service.impl;
import com.aua.util.Container;
import com.aua.dao.IBaseDao;
import com.aua.service.impl.BaseServiceImpl;
import java.util.List;
import com.greencloud.entity.PosSelectedObject;
import com.greencloud.dao.IPosSelectedObjectDao;
import com.greencloud.service.IPosSelectedObjectService;
import org.springframework.dao.DataAccessException;
public class PosSelectedObjectServiceImpl extends BaseServiceImpl implements IPosSelectedObjectService
{
   //dao 
   private IPosSelectedObjectDao posSelectedObjectDao;
   
  /**
   *save posSelectedObject object  method
   *@param posSelectedObject PosSelectedObject 
   *@throws DataAccessException 
   *@author  
   *@version 1.0
   *@date 2016-09-11 15:34
   */
  public void savePosSelectedObject(PosSelectedObject posSelectedObject) throws DataAccessException{
     	if(log.isDebugEnabled()){
			log.debug("start savePosSelectedObject method");
		}
         posSelectedObjectDao.save(posSelectedObject);
     	if(log.isDebugEnabled()){
			log.debug("end savePosSelectedObject method");
		}
  }//end save method
  
   /**
   *update posSelectedObject method
   *@param posSelectedObject PosSelectedObject
   *@throws DataAccessException 
   *@author 
   *@version 1.0
   *@date 2016-09-11 15:34
   */
  public void updatePosSelectedObject(PosSelectedObject posSelectedObject) throws DataAccessException{ 
  	    if(log.isDebugEnabled()){
			log.debug("start updatePosSelectedObject method");
		}
        posSelectedObjectDao.update(posSelectedObject);
        if(log.isDebugEnabled()){
			log.debug("end updatePosSelectedObject method");
		}
  }//end update method
  
   /**
   *save or update posSelectedObject object method
   *@param posSelectedObject PosSelectedObject
   *@throws DataAccessException
   *@author  
   *@version 1.0
   *@date 2016-09-11 15:34
   */
  public void saveOrUpdatePosSelectedObject(PosSelectedObject posSelectedObject) throws DataAccessException{//start saveOrUpdate method
      
        if(log.isDebugEnabled()){
			log.debug("start saveOrUpdatePosSelectedObject method");
		}
		
        posSelectedObjectDao.saveOrUpdate(posSelectedObject);
        
        if(log.isDebugEnabled()){
			log.debug("end saveOrUpdatePosSelectedObject method");
		}
		
  }//end saveOrUpdate method

  /**
   *query a container obj
   *@param posSelectedObject PosSelectedObject query vo
   *@param firstResult
   *@param maxResults 
   *@throws DataAccessException 
   *@author weihuawon
   *@date 2016-09-11 15:34
   */
  public Container<PosSelectedObject> findPosSelectedObject(PosSelectedObject posSelectedObject,int firstResult ,int maxResults)throws DataAccessException{
        if(log.isDebugEnabled()){
			log.debug("start findPosSelectedObject method");
		}
        Container<PosSelectedObject> container = new Container<PosSelectedObject>();
        List<PosSelectedObject> list = posSelectedObjectDao.list(posSelectedObject, firstResult , maxResults);
        container.setResults(list);
        container.setTotalRows(posSelectedObjectDao.count(posSelectedObject));
        if(log.isDebugEnabled()){
			log.debug("end findPosSelectedObject method");
		}
       return container;
  }//end find method

  /**
   *count obj amount
   *@param posSelectedObject PosSelectedObject query vo
   *@throws DataAccessException
   *@author 
   *@date 2016-09-11 15:34
   */
  public int countPosSelectedObject(PosSelectedObject posSelectedObject)throws DataAccessException{
    return posSelectedObjectDao.count(posSelectedObject);
  }//end count method
  
   /**
   *query a posSelectedObject by id 
   *@param id 
   *@throws DataAccessException 
   *@author 
   *@date 2016-09-11 15:34
   */
  public PosSelectedObject findPosSelectedObjectById(Long id)throws DataAccessException{
    PosSelectedObject  posSelectedObject = posSelectedObjectDao.load(id);
    return posSelectedObject;
  }//end findPosSelectedObjectById method
  
    /**
   *query posSelectedObject collection method
   *@param posSelectedObject PosSelectedObject send query vo 
   *@throws DataAccessException 
   *@author 
   *@version 1.0
   *@date 2016-09-11  15:34
   */
  public List<PosSelectedObject> listPosSelectedObject(PosSelectedObject  posSelectedObject)
		throws DataAccessException {
	  List<PosSelectedObject> list = posSelectedObjectDao.list(posSelectedObject);
      return list;
  }//end list method
  
   /**
   *query posSelectedObject collection method
   *@param posSelectedObject PosSelectedObject send query vo 
   *@param firstResult 
   *@param maxResults 
   *@throws DataAccessException 
   *@author 
   *@version 1.0
   *@date 2016-09-11  15:34
   */
  public List<PosSelectedObject> listPosSelectedObject(PosSelectedObject posSelectedObject,int firstResult ,int maxResults)throws DataAccessException{
	   List<PosSelectedObject> list = posSelectedObjectDao.list(posSelectedObject, firstResult ,maxResults);
	   return list;
  }
  
  /**
   * Spring 
   * @param  posSelectedObjectDao 
   * @author weihuawon
   * @date 2016å¹´M9æœˆd11æ—?15:34
   */
  public void setPosSelectedObjectDao(IPosSelectedObjectDao posSelectedObjectDao){ 
     this.posSelectedObjectDao = posSelectedObjectDao;
  }//end setPosSelectedObjectDao method
  
  @Override
  protected IBaseDao getDao(){
    return this.posSelectedObjectDao;
  }//end getDao method
}//end class PosSelectedObjectServiceImpl