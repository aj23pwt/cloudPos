package com.greencloud.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.greencloud.dto.PosCodeDto;
import com.greencloud.dto.PosPluNoteDto;
import com.greencloud.dto.PosTableMapDto;
import com.greencloud.entity.CodeBase;
import com.greencloud.entity.PosConddtl;
import com.greencloud.entity.PosPccode;
import com.greencloud.entity.PosPluAll;
import com.greencloud.entity.PosRes;
import com.greencloud.entity.SysOption;
import com.greencloud.service.IPosPluAllService;
import com.greencloud.service.IPosResService;
import com.greencloud.service.IPosSubService;
import com.greencloud.service.ISysOptionService;
import com.greencloud.util.ModelUtil;
import com.greencloud.utils.PropertiesUtil4Sync;

@Controller
@RequestMapping(value = "/posWx")
public class PosWXController {

	private IPosPluAllService posPluAllService;
	private IPosSubService posSubService;
	private IPosResService  posResService;
	
	
	public void setPosResService(IPosResService posResService) {
		this.posResService = posResService;
	}

	public void setPosSubService(IPosSubService posSubService) {
		this.posSubService = posSubService;
	}

	public void setPosPluAllService(IPosPluAllService posPluAllService) {
		this.posPluAllService = posPluAllService;
	}
	private ISysOptionService sysOptionService;

	public void setSysOptionService(ISysOptionService sysOptionService) {
		this.sysOptionService = sysOptionService;
	}
//菜本获取
	@ResponseBody
	@RequestMapping(value = "/getPosWxPluNote")
//	public ModelAndView getPosWxPluNote (@RequestParam(value = "hotelGroupId", required = true) String hotelGroupId,
//								    @RequestParam(value = "hotelId", required = true) String hotelId,
//									@RequestParam(value = "pccode", required = true) String pccode,
//	                                HttpServletResponse response) throws Exception {
	public void getPosWxPluNote(HttpServletRequest request,HttpServletResponse response){
		ResponseWxJson j = new ResponseWxJson();
		try {
			String hotelGroupId = request.getParameter("hotelGroupId");
			String hotelId = request.getParameter("hotelId");
			String pccode = request.getParameter("pccode");
	        List<PosPluNoteDto> list = posPluAllService.getPosWxPluNote(java.lang.Long.parseLong(hotelGroupId),java.lang.Long.parseLong( hotelId), pccode);
	        if(list != null && list.size()>0){
	        	j.setStauts("0");
	  			j.setData(JSON.toJSONString(list));
	  		}
	  		else{
	  			j.setStauts("0");
	  		    j.setData("未找到对应的数据!");
	  		}
		}catch (Exception e) {
			j.setStauts("-1");
  		    j.setData("请求异常!");
		} 
		
  		BaseHttpResponseController.OutputJson(j, response);
	}
//营业点获取
	@ResponseBody
	@RequestMapping(value = "/getPosWxPccode")
	public void getPosWxPccode(HttpServletRequest request,HttpServletResponse response){
		ResponseWxJson j = new ResponseWxJson();
		try {
			String hotelGroupId = request.getParameter("hotelGroupId");
			String hotelId = request.getParameter("hotelId");
	        PosPccode posPccode = new PosPccode();
	        posPccode.setHotelGroupId(java.lang.Long.parseLong(hotelGroupId));
	        posPccode.setHotelId(java.lang.Long.parseLong(hotelId));
	        List<Object> data = posSubService.getCodeList("PosPccode", posPccode);
	        List<PosCodeDto> list = new ArrayList<PosCodeDto>();
	        if(data!=null && data.size()>0){
	        	for (Iterator<Object> i = data.iterator(); i.hasNext();) {
	        		Object obj = i.next();
	        		PosCodeDto posCodeDto = new PosCodeDto();
	        		posCodeDto.setCode((String) ModelUtil.getPropertyValue(obj, "code"));
	        		posCodeDto.setDescript((String) ModelUtil.getPropertyValue(obj, "descript"));
	        		list.add(posCodeDto);
				}
	        }
	        if(list != null && list.size()>0){
	        	j.setStauts("0");
	  			j.setData(JSON.toJSONString(list));
	  		}
	  		else{
	  			j.setStauts("0");
	  		    j.setData("未找到对应的数据!");
	  		}
		}catch (Exception e) {
			j.setStauts("-1");
  		    j.setData("请求异常!");
		} 
		
  		BaseHttpResponseController.OutputJson(j, response);
	}
//做法代码获取
	@ResponseBody
	@RequestMapping(value = "/getPosWxPluConddtl")
	public void getPosWxPluConddtl(HttpServletRequest request,HttpServletResponse response){
		ResponseWxJson j = new ResponseWxJson();
		try {
			String hotelGroupId = request.getParameter("hotelGroupId");
			String hotelId = request.getParameter("hotelId");
	        PosConddtl posConddtl = new PosConddtl();
	        posConddtl.setHotelGroupId(java.lang.Long.parseLong(hotelGroupId));
	        posConddtl.setHotelId(java.lang.Long.parseLong(hotelId));
	        List<Object> data = posSubService.getCodeList("PosConddtl", posConddtl);
	        List<PosCodeDto> list = new ArrayList<PosCodeDto>();
	        if(data!=null && data.size()>0){
	        	for (Iterator<Object> i = data.iterator(); i.hasNext();) {
	        		Object obj = i.next();
	        		PosCodeDto posCodeDto = new PosCodeDto();
	        		posCodeDto.setCode((String) ModelUtil.getPropertyValue(obj, "code"));
	        		posCodeDto.setDescript((String) ModelUtil.getPropertyValue(obj, "descript"));
	        		list.add(posCodeDto);
				}
	        }
	        if(list != null && list.size()>0){
	        	j.setStauts("0");
	  			j.setData(JSON.toJSONString(list));
	  		}
	  		else{
	  			j.setStauts("0");
	  		    j.setData("未找到对应的数据!");
	  		}
		}catch (Exception e) {
			j.setStauts("-1");
  		    j.setData("请求异常!");
		} 
  		BaseHttpResponseController.OutputJson(j, response);
	}
	//获取桌号资源
	@ResponseBody
	@RequestMapping(value = "/getPosWxPccodeTable")
	public void getPosWxPccodeTable(HttpServletRequest request,HttpServletResponse response){
		ResponseWxJson j = new ResponseWxJson();
		try {
			String hotelGroupId = request.getParameter("hotelGroupId");
			String hotelId = request.getParameter("hotelId");
			String pccode = request.getParameter("pccode");
			String shift = request.getParameter("shift");
			String bizDate = request.getParameter("bizDate");
			List<PosTableMapDto> data = posResService.getTableMapDto(hotelGroupId, hotelId, bizDate, shift, pccode, "all", "all", "2");
	        List<PosCodeDto> list = new ArrayList<PosCodeDto>();
	        for(Iterator<PosTableMapDto> i = data.iterator(); i.hasNext();) {
	        	PosTableMapDto obj = i.next();
                   if("0".equalsIgnoreCase(obj.getSta())){
                	   PosCodeDto posCodeDto = new PosCodeDto();
   	        		   posCodeDto.setCode(obj.getTableno());
   	        		   posCodeDto.setDescript(obj.getType_descript());
   	        		   list.add(posCodeDto);
   				    }
			}
	        if(list != null && list.size()>0){
	        	j.setStauts("0");
	  			j.setData(JSON.toJSONString(list));
	  		}
	  		else{
	  			j.setStauts("0");
	  		    j.setData("未找到对应的数据!");
	  		}
		}catch (Exception e) {
			j.setStauts("-1");
  		    j.setData("请求异常!");
		} 
  		BaseHttpResponseController.OutputJson(j, response);
	}
	//订单建立
		@ResponseBody
		@RequestMapping(value = "/addPosWxResMaster")
		public void addPosWxResMaster(HttpServletRequest request,HttpServletResponse response){
			ResponseWxJson j = new ResponseWxJson();
			try {
				// 读取请求内容
				BufferedReader br = new BufferedReader(new InputStreamReader(
						request.getInputStream(),"UTF-8"));
				String line = null;
				StringBuilder sb = new StringBuilder();
				while ((line = br.readLine()) != null) {
					sb.append(line);
				}
				String requestData = sb.toString();
				PosRes res = JSON.parseObject(requestData, PosRes.class);
			}catch (Exception e) {
				j.setStauts("-1");
	  		    j.setData("请求异常!");
			} 
	  		BaseHttpResponseController.OutputJson(j, response);
		}
	@ResponseBody
	@RequestMapping(value = "/filePosPic")
	public ModelAndView filePosPic(HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		String path = request.getParameter("path");
		System.out.println(path);
		response.reset();
		response.setContentType("application/x-msdownload");
		response.setHeader("Content-Disposition", "attachment; filename="
				+ path);

		OutputStream out = response.getOutputStream();
		String separator = System.getProperty("file.separator");

		File file = new File(path);
		if (file.exists()) {
			FileInputStream in = null;
			try {
				in = new FileInputStream(file);
				byte[] buffer = new byte[1024];
				int result = 0;
				while ((result = in.read(buffer)) != -1) {
					out.write(buffer, 0, result);
				}
			} catch (IOException e) {
				throw e;
			} finally {
				in.close();
				out.close();
			}
		}
		return null;
	}
	@ResponseBody
	@RequestMapping(value = "/downloadFiles")
	public ModelAndView downloadFiles(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		PosPluAll posPlu = new PosPluAll();
		posPlu.setHotelGroupId(Long.parseLong(PropertiesUtil4Sync
				.getProperty("hotelGroupId")));
		posPlu.setHotelId(Long.parseLong(PropertiesUtil4Sync
				.getProperty("hotelId")));
		List<PosPluAll> posPluAllList = posPluAllService.listPosPluAll(posPlu);
		if (posPluAllList != null && posPluAllList.size() > 0) {
			List<File> files = new ArrayList<File>();
			long fileLength = 0;
			for (PosPluAll posPluAll : posPluAllList) {
				if (!(posPluAll.getPicPath1() == null)
						&& !(posPluAll.getPicPath1() == "")) {
					String filePath = posPluAll.getPicPath1();
					File file = new File(filePath);
					files.add(file);
					fileLength += file.length();
				}
			}
			String fileName = UUID.randomUUID().toString() + ".zip";
			// 在服务器端创建打包下载的临时文件
			SysOption picOption =  sysOptionService.findSysOptionByCatalogItem("pos", "pos_pic_path",Long.parseLong(PropertiesUtil4Sync
					.getProperty("hotelGroupId")), Long.parseLong(PropertiesUtil4Sync.getProperty("hotelId")));
			String outFilePath = "/home/pos/"+fileName;
			if(picOption != null && picOption.getSetValue() != null && !picOption.getSetValue().equals("")){
				 outFilePath = picOption.getSetValue() +"/"+ fileName;
			}		    
			File file = new File(outFilePath);
			// 文件输出流
			FileOutputStream outStream = new FileOutputStream(file);
			// 压缩流
			ZipOutputStream toClient = new ZipOutputStream(outStream);
			zipFile(files, toClient);
			toClient.close();
			outStream.close();
			this.downloadZip(file, response);
		}
		return null;
	}

	/**
	 * 压缩文件列表中的文件
	 * 
	 * @param files
	 * @param outputStream
	 * @throws IOException
	 */
	public static void zipFile(List<File> files, ZipOutputStream outputStream)
			throws IOException, ServletException {
		try {
			int size = files.size();
			// 压缩列表中的文件
			for (int i = 0; i < size; i++) {
				File file = (File) files.get(i);
				zipFile(file, outputStream);
			}
		} catch (IOException e) {
			throw e;
		}
	}

	/**
	 * 将文件写入到zip文件中
	 * 
	 * @param inputFile
	 * @param outputstream
	 * @throws Exception
	 */
	public static void zipFile(File inputFile, ZipOutputStream outputstream)
			throws IOException, ServletException {
		try {
			if (inputFile.exists()) {
				if (inputFile.isFile()) {
					FileInputStream inStream = new FileInputStream(inputFile);
					BufferedInputStream bInStream = new BufferedInputStream(
							inStream);
					ZipEntry entry = new ZipEntry(inputFile.getName());
					outputstream.putNextEntry(entry);

					final int MAX_BYTE = 10 * 1024 * 1024; // 最大的流为10M
					long streamTotal = 0; // 接受流的容量
					int streamNum = 0; // 流需要分开的数量
					int leaveByte = 0; // 文件剩下的字符数
					byte[] inOutbyte; // byte数组接受文件的数据

					streamTotal = bInStream.available(); // 通过available方法取得流的最大字符数
					streamNum = (int) Math.floor(streamTotal / MAX_BYTE); // 取得流文件需要分开的数量
					leaveByte = (int) streamTotal % MAX_BYTE; // 分开文件之后,剩余的数量

					if (streamNum > 0) {
						for (int j = 0; j < streamNum; ++j) {
							inOutbyte = new byte[MAX_BYTE];
							// 读入流,保存在byte数组
							bInStream.read(inOutbyte, 0, MAX_BYTE);
							outputstream.write(inOutbyte, 0, MAX_BYTE); // 写出流
						}
					}
					// 写出剩下的流数据
					inOutbyte = new byte[leaveByte];
					bInStream.read(inOutbyte, 0, leaveByte);
					outputstream.write(inOutbyte);
					outputstream.closeEntry(); // Closes the current ZIP entry
												// and positions the stream for
												// writing the next entry
					bInStream.close(); // 关闭
					inStream.close();
				}
			} else {
				throw new ServletException("文件不存在！");
			}
		} catch (IOException e) {
			throw e;
		}
	}

	/**
	 * 下载打包的文件
	 * 
	 * @param file
	 * @param response
	 */
	public void downloadZip(File file, HttpServletResponse response) {
		try {
			// 以流的形式下载文件。
			BufferedInputStream fis = new BufferedInputStream(
					new FileInputStream(file.getPath()));
			byte[] buffer = new byte[fis.available()];
			fis.read(buffer);
			fis.close();
			// 清空response
			response.reset();
			OutputStream toClient = new BufferedOutputStream(
					response.getOutputStream());
			
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", "attachment;filename="
					+ file.getName());
			toClient.write(buffer);
			toClient.flush();
			toClient.close();
			file.delete(); // 将生成的服务器端文件删除
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}

	public static String toUtf8String(String s) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (c >= 0 && c <= 255) {
				sb.append(c);
			} else {
				byte[] b;
				try {
					b = Character.toString(c).getBytes("utf-8");
				} catch (Exception ex) {
					b = new byte[0];
				}
				for (int j = 0; j < b.length; j++) {
					int k = b[j];
					if (k < 0)
						k += 256;
					sb.append("%" + Integer.toHexString(k).toUpperCase());
				}
			}
		}
		return sb.toString();
	}

}
